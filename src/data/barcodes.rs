//! Barcode core sequences and flanking motifs (CHTD Appendix 14).
//!
//! Source: Chemistry Technical Document (CHTD_500_v1_revAR_25Nov2024) →
//! Appendix 14: *Barcode sequences*.
//!
//! We include:
//! - Native (NB01–NB96) forward-barcode strings and their **flanking motifs**
//! - Shared core sequences for **BP/BC/RB/16S/RLB** sets (1–96), plus flanking motifs for
//!   Rapid, PCR‑cDNA, Rapid‑PCR and 16S kits.
//!
//! > ONT notes that Rapid barcodes are not published as full sequences; only the **core**
//! > strings are given. Flanking motifs are sufficient for identification.

use crate::kit::{SequenceRecord, SeqKind, Provenance};

const CHTD_A14: Provenance = Provenance{
    source: "Chemistry Technical Document (CHTD_500_v1_revAR_25Nov2024)",
    url: "https://nanoporetech.com/document/chemistry-technical-document",
    reference: "Appendix 14: Barcode sequences",
    notes: "NB01–NB96 list; shared BP/BC/RB/16S/RLB cores; flanking motifs for multiple kits.",
};

// === Flanking sequences ===

/// NB forward flank: 5' - AAGGTTAA - barcode - CAGCACCT - 3'
pub const NB_FLANK_FWD: SequenceRecord = SequenceRecord{ name: "NB_flank_fwd", kind: SeqKind::Flank, sequence: "AAGGTTAA", provenance: CHTD_A14 };
/// NB reverse flank: 5' - GGTGCTG - barcode - TTAACCTTAGCAAT - 3'
pub const NB_FLANK_REV5: SequenceRecord = SequenceRecord{ name: "NB_flank_rev5", kind: SeqKind::Flank, sequence: "GGTGCTG", provenance: CHTD_A14 };
pub const NB_FLANK_REV3: SequenceRecord = SequenceRecord{ name: "NB_flank_rev3", kind: SeqKind::Flank, sequence: "TTAACCTTAGCAAT", provenance: CHTD_A14 };

/// Rapid barcoding flank (left/right).
pub const RB_FLANK_LEFT: SequenceRecord = SequenceRecord{ name: "RB_flank_left", kind: SeqKind::Flank, sequence: "GCTTGGGTGTTTAACC", provenance: CHTD_A14 };
pub const RB_FLANK_RIGHT: SequenceRecord = SequenceRecord{ name: "RB_flank_right", kind: SeqKind::Flank, sequence: "GTTTTCGCATTTATCGTGAAACGCTTTCGCGTTTTTCGTGCGCCGCTTCA", provenance: CHTD_A14 };

/// PCR‑cDNA flanks (top/bottom) to avoid loop formation.
pub const PCB_FLANK_TOP: SequenceRecord = SequenceRecord{ name: "PCB_flank_top", kind: SeqKind::Flank, sequence: "ATCGCCTACCGTGA", provenance: CHTD_A14 };
pub const PCB_FLANK_BOT_A: SequenceRecord = SequenceRecord{ name: "PCB_flank_bot_A", kind: SeqKind::Flank, sequence: "TTGCCTGTCGCTCTATCTTC", provenance: CHTD_A14 };
pub const PCB_FLANK_BOT_B: SequenceRecord = SequenceRecord{ name: "PCB_flank_bot_B", kind: SeqKind::Flank, sequence: "TCTGTTGGTGCTGATATTGC", provenance: CHTD_A14 };

/// Rapid‑PCR flank.
pub const RPB_FLANK: SequenceRecord = SequenceRecord{ name: "RPB_flank", kind: SeqKind::Flank, sequence: "ATCGCCTACCGTGAC", provenance: CHTD_A14 };

/// 16S primer + barcode flanks.
pub const SIXTEENS_FLANK: SequenceRecord = SequenceRecord{ name: "16S_flank", kind: SeqKind::Flank, sequence: "ATCGCCTACCGTGAC", provenance: CHTD_A14 };
pub const SIXTEENS_FWD_TARGET: SequenceRecord = SequenceRecord{ name: "16S_fwd_target", kind: SeqKind::Primer, sequence: "AGAGTTTGATCMTGGCTCAG", provenance: Provenance{ notes: "M = A/C wobble base", ..CHTD_A14 } };
pub const SIXTEENS_REV_TARGET: SequenceRecord = SequenceRecord{ name: "16S_rev_target", kind: SeqKind::Primer, sequence: "CGGTTACCTTGTTACGACTT", provenance: CHTD_A14 };

// === NB01–NB96 forward barcode cores ===

#[allow(unused_macros)]
macro_rules! nb { ($id:literal, $seq:literal) => { SequenceRecord{ name: $id, kind: SeqKind::Barcode, sequence: $seq, provenance: CHTD_A14 } }; }


// === NB01–NB96 forward barcode cores ===
#[allow(unused_macros)]
macro_rules! nb { ($id:literal, $seq:literal) => { SequenceRecord{ name: $id, kind: SeqKind::Barcode, sequence: $seq, provenance: CHTD_A14 } }; }
pub const NB_BARCODES: &[SequenceRecord] = &[
    nb!("NB01", "CACAAAGACACCGACAACTTTCTT"),
    nb!("NB02", "ACAGACGACTACAAACGGAATCGA"),
    nb!("NB03", "CCTGGTAACTGGGACACAAGACTC"),
    nb!("NB04", "TAGGGAAACACGATAGAATCCGAA"),
    nb!("NB05", "AAGGTTACACAAACCCTGGACAAG"),
    nb!("NB06", "GACTACTTTCTGCCTTTGCGAGAA"),
    nb!("NB07", "AAGGATTCATTCCCACGGTAACAC"),
    nb!("NB08", "ACGTAACTTGGTTTGTTCCCTGAA"),
    nb!("NB09", "AACCAAGACTCGCTGTGCCTAGTT"),
    nb!("NB10", "GAGAGGACAAAGGTTTCAACGCTT"),
    nb!("NB11", "TCCATTCCCTCCGATAGATGAAAC"),
    nb!("NB12", "TCCGATTCTGCTTCTTTCTACCTG"),
    nb!("NB13", "AGAACGACTTCCATACTCGTGTGA"),
    nb!("NB14", "AACGAGTCTCTTGGGACCCATAGA"),
    nb!("NB15", "AGGTCTACCTCGCTAACACCACTG"),
    nb!("NB16", "CGTCAACTGACAGTGGTTCGTACT"),
    nb!("NB17", "ACCCTCCAGGAAAGTACCTCTGAT"),
    nb!("NB18", "CCAAACCCAACAACCTAGATAGGC"),
    nb!("NB19", "GTTCCTCGTGCAGTGTCAAGAGAT"),
    nb!("NB20", "TTGCGTCCTGTTACGAGAACTCAT"),
    nb!("NB21", "GAGCCTCTCATTGTCCGTTCTCTA"),
    nb!("NB22", "ACCACTGCCATGTATCAAAGTACG"),
    nb!("NB23", "CTTACTACCCAGTGAACCTCCTCG"),
    nb!("NB24", "GCATAGTTCTGCATGATGGGTTAG"),
    nb!("NB25", "GTAAGTTGGGTATGCAACGCAATG"),
    nb!("NB26", "CATACAGCGACTACGCATTCTCAT"),
    nb!("NB27", "CGACGGTTAGATTCACCTCTTACA"),
    nb!("NB28", "TGAAACCTAAGAAGGCACCGTATC"),
    nb!("NB29", "CTAGACACCTTGGGTTGACAGACC"),
    nb!("NB30", "TCAGTGAGGATCTACTTCGACCCA"),
    nb!("NB31", "TGCGTACAGCAATCAGTTACATTG"),
    nb!("NB32", "CCAGTAGAAGTCCGACAACGTCAT"),
    nb!("NB33", "CAGACTTGGTACGGTTGGGTAACT"),
    nb!("NB34", "GGACGAAGAACTCAAGTCAAAGGC"),
    nb!("NB35", "CTACTTACGAAGCTGAGGGACTGC"),
    nb!("NB36", "ATGTCCCAGTTAGAGGAGGAAACA"),
    nb!("NB37", "GCTTGCGATTGATGCTTAGTATCA"),
    nb!("NB38", "ACCACAGGAGGACGATACAGAGAA"),
    nb!("NB39", "CCACAGTGTCAACTAGAGCCTCTC"),
    nb!("NB40", "TAGTTTGGATGACCAAGGATAGCC"),
    nb!("NB41", "GGAGTTCGTCCAGAGAAGTACACG"),
    nb!("NB42", "CTACGTGTAAGGCATACCTGCCAG"),
    nb!("NB43", "CTTTCGTTGTTGACTCGACGGTAG"),
    nb!("NB44", "AGTAGAAAGGGTTCCTTCCCACTC"),
    nb!("NB45", "GATCCAACAGAGATGCCTTCAGTG"),
    nb!("NB46", "GCTGTGTTCCACTTCATTCTCCTG"),
    nb!("NB47", "GTGCAACTTTCCCACAGGTAGTTC"),
    nb!("NB48", "CATCTGGAACGTGGTACACCTGTA"),
    nb!("NB49", "ACTGGTGCAGCTTTGAACATCTAG"),
    nb!("NB50", "ATGGACTTTGGTAACTTCCTGCGT"),
    nb!("NB51", "GTTGAATGAGCCTACTGGGTCCTC"),
    nb!("NB52", "TGAGAGACAAGATTGTTCGTGGAC"),
    nb!("NB53", "AGATTCAGACCGTCTCATGCAAAG"),
    nb!("NB54", "CAAGAGCTTTGACTAAGGAGCATG"),
    nb!("NB55", "TGGAAGATGAGACCCTGATCTACG"),
    nb!("NB56", "TCACTACTCAACAGGTGGCATGAA"),
    nb!("NB57", "GCTAGGTCAATCTCCTTCGGAAGT"),
    nb!("NB58", "CAGGTTACTCCTCCGTGAGTCTGA"),
    nb!("NB59", "TCAATCAAGAAGGGAAAGCAAGGT"),
    nb!("NB60", "CATGTTCAACCAAGGCTTCTATGG"),
    nb!("NB61", "AGAGGGTACTATGTGCCTCAGCAC"),
    nb!("NB62", "CACCCACACTTACTTCAGGACGTA"),
    nb!("NB63", "TTCTGAAGTTCCTGGGTCTTGAAC"),
    nb!("NB64", "GACAGACACCGTTCATCGACTTTC"),
    nb!("NB65", "TTCTCAGTCTTCCTCCAGACAAGG"),
    nb!("NB66", "CCGATCCTTGTGGCTTCTAACTTC"),
    nb!("NB67", "GTTTGTCATACTCGTGTGCTCACC"),
    nb!("NB68", "GAATCTAAGCAAACACGAAGGTGG"),
    nb!("NB69", "TACAGTCCGAGCCTCATGTGATCT"),
    nb!("NB70", "ACCGAGATCCTACGAATGGAGTGT"),
    nb!("NB71", "CCTGGGAGCATCAGGTAGTAACAG"),
    nb!("NB72", "TAGCTGACTGTCTTCCATACCGAC"),
    nb!("NB73", "AAGAAACAGGATGACAGAACCCTC"),
    nb!("NB74", "TACAAGCATCCCAACACTTCCACT"),
    nb!("NB75", "GACCATTGTGATGAACCCTGTTGT"),
    nb!("NB76", "ATGCTTGTTACATCAACCCTGGAC"),
    nb!("NB77", "CGACCTGTTTCTCAGGGATACAAC"),
    nb!("NB78", "AACAACCGAACCTTTGAATCAGAA"),
    nb!("NB79", "TCTCGGAGATAGTTCTCACTGCTG"),
    nb!("NB80", "CGGATGAACATAGGATAGCGATTC"),
    nb!("NB81", "CCTCATCTTGTGAAGTTGTTTCGG"),
    nb!("NB82", "ACGGTATGTCGAGTTCCAGGACTA"),
    nb!("NB83", "TGGCTTGATCTAGGTAAGGTCGAA"),
    nb!("NB84", "GTAGTGGACCTAGAACCTGTGCCA"),
    nb!("NB85", "AACGGAGGAGTTAGTTGGATGATC"),
    nb!("NB86", "AGGTGATCCCAACAAGCGTAAGTA"),
    nb!("NB87", "TACATGCTCCTGTTGTTAGGGAGG"),
    nb!("NB88", "TCTTCTACTACCGATCCGAAGCAG"),
    nb!("NB89", "ACAGCATCAATGTTTGGCTAGTTG"),
    nb!("NB90", "GATGTAGAGGGTACGGTTTGAGGC"),
    nb!("NB91", "GGCTCCATAGGAACTCACGCTACT"),
    nb!("NB92", "TTGTGAGTGGAAAGATACAGGACC"),
    nb!("NB93", "AGTTTCCATCACTTCAGACTTGGG"),
    nb!("NB94", "GATTGTCCTCAAACTGCCACCTAC"),
    nb!("NB95", "CCTGTCTGGAAGAAGAATGGACTT"),
    nb!("NB96", "CTGAACGGTCATAGAGTCCACCAT")
];

/// Convenience: first 24 NB barcodes as a separate constant to allow use in `const` kit registry.
pub const NB_BARCODES_24: &[SequenceRecord] = &[
    nb!("NB01", "CACAAAGACACCGACAACTTTCTT"),
    nb!("NB02", "ACAGACGACTACAAACGGAATCGA"),
    nb!("NB03", "CCTGGTAACTGGGACACAAGACTC"),
    nb!("NB04", "TAGGGAAACACGATAGAATCCGAA"),
    nb!("NB05", "AAGGTTACACAAACCCTGGACAAG"),
    nb!("NB06", "GACTACTTTCTGCCTTTGCGAGAA"),
    nb!("NB07", "AAGGATTCATTCCCACGGTAACAC"),
    nb!("NB08", "ACGTAACTTGGTTTGTTCCCTGAA"),
    nb!("NB09", "AACCAAGACTCGCTGTGCCTAGTT"),
    nb!("NB10", "GAGAGGACAAAGGTTTCAACGCTT"),
    nb!("NB11", "TCCATTCCCTCCGATAGATGAAAC"),
    nb!("NB12", "TCCGATTCTGCTTCTTTCTACCTG"),
    nb!("NB13", "AGAACGACTTCCATACTCGTGTGA"),
    nb!("NB14", "AACGAGTCTCTTGGGACCCATAGA"),
    nb!("NB15", "AGGTCTACCTCGCTAACACCACTG"),
    nb!("NB16", "CGTCAACTGACAGTGGTTCGTACT"),
    nb!("NB17", "ACCCTCCAGGAAAGTACCTCTGAT"),
    nb!("NB18", "CCAAACCCAACAACCTAGATAGGC"),
    nb!("NB19", "GTTCCTCGTGCAGTGTCAAGAGAT"),
    nb!("NB20", "TTGCGTCCTGTTACGAGAACTCAT"),
    nb!("NB21", "GAGCCTCTCATTGTCCGTTCTCTA"),
    nb!("NB22", "ACCACTGCCATGTATCAAAGTACG"),
    nb!("NB23", "CTTACTACCCAGTGAACCTCCTCG"),
    nb!("NB24", "GCATAGTTCTGCATGATGGGTTAG")
];

// === Shared BP/BC/RB/16S/RLB cores ===
macro_rules! bx { ($label:literal, $seq:literal) => { SequenceRecord{ name: $label, kind: SeqKind::Barcode, sequence: $seq, provenance: CHTD_A14 } }; }

/// Shared cores 1–24 (BP/BC/RB/16S/RLB).
pub const SHARED_1_TO_24: &[SequenceRecord] = &[
    bx!("BP01/BC01/RB01/16S01/RLB01", "AAGAAAGTTGTCGGTGTCTTTGTG"),
    bx!("BP02/BC02/RB02/16S02/RLB02", "TCGATTCCGTTTGTAGTCGTCTGT"),
    bx!("BP03/BC03/RB03/16S03/RLB03", "GAGTCTTGTGTCCCAGTTACCAGG"),
    bx!("BP04/BC04/RB04/16S04/RLB04", "TTCGGATTCTATCGTGTTTCCCTA"),
    bx!("BP05/BC05/RB05/16S05/RLB05", "CTTGTCCAGGGTTTGTGTAACCTT"),
    bx!("BP06/BC06/RB06/16S06/RLB06", "TTCTCGCAAAGGCAGAAAGTAGTC"),
    bx!("BP07/BC07/RB07/16S07/RLB07", "GTGTTACCGTGGGAATGAATCCTT"),
    bx!("BP08/BC08/RB08/16S08/RLB08", "TTCAGGGAACAAACCAAGTTACGT"),
    bx!("BP09/BC09/RB09/16S09/RLB09", "AACTAGGCACAGCGAGTCTTGGTT"),
    bx!("BP10/BC10/RB10/16S10/RLB10", "AAGCGTTGAAACCTTTGTCCTCTC"),
    bx!("BP11/BC11/RB11/16S11/RLB11", "GTTTCATCTATCGGAGGGAATGGA"),
    bx!("BP12/BC12/RB12/16S12/RLB12", "CAGGTAGAAAGAAGCAGAATCGGA"),
    bx!("BP13/BC13/RB13/16S13/RLB13", "AGAACGACTTCCATACTCGTGTGA"),
    bx!("BP14/BC14/RB14/16S14/RLB14", "AACGAGTCTCTTGGGACCCATAGA"),
    bx!("BP15/BC15/RB15/16S15/RLB15", "AGGTCTACCTCGCTAACACCACTG"),
    bx!("BP16/BC16/RB16/16S16/RLB16", "CGTCAACTGACAGTGGTTCGTACT"),
    bx!("BP17/BC17/RB17/16S17/RLB17", "ACCCTCCAGGAAAGTACCTCTGAT"),
    bx!("BP18/BC18/RB18/16S18/RLB18", "CCAAACCCAACAACCTAGATAGGC"),
    bx!("BP19/BC19/RB19/16S19/RLB19", "GTTCCTCGTGCAGTGTCAAGAGAT"),
    bx!("BP20/BC20/RB20/16S20/RLB20", "TTGCGTCCTGTTACGAGAACTCAT"),
    bx!("BP21/BC21/RB21/16S21/RLB21", "GAGCCTCTCATTGTCCGTTCTCTA"),
    bx!("BP22/BC22/RB22/16S22/RLB22", "ACCACTGCCATGTATCAAAGTACG"),
    bx!("BP23/BC23/RB23/16S23/RLB23", "CTTACTACCCAGTGAACCTCCTCG"),
    bx!("BP24/BC24/RB24/16S24/RLB24", "GCATAGTTCTGCATGATGGGTTAG")
];

/// Convenience: first 12 shared cores (for PBC001 kits).
pub const SHARED_1_TO_12: &[SequenceRecord] = &[
    bx!("BP01/BC01/RB01/16S01/RLB01", "AAGAAAGTTGTCGGTGTCTTTGTG"),
    bx!("BP02/BC02/RB02/16S02/RLB02", "TCGATTCCGTTTGTAGTCGTCTGT"),
    bx!("BP03/BC03/RB03/16S03/RLB03", "GAGTCTTGTGTCCCAGTTACCAGG"),
    bx!("BP04/BC04/RB04/16S04/RLB04", "TTCGGATTCTATCGTGTTTCCCTA"),
    bx!("BP05/BC05/RB05/16S05/RLB05", "CTTGTCCAGGGTTTGTGTAACCTT"),
    bx!("BP06/BC06/RB06/16S06/RLB06", "TTCTCGCAAAGGCAGAAAGTAGTC"),
    bx!("BP07/BC07/RB07/16S07/RLB07", "GTGTTACCGTGGGAATGAATCCTT"),
    bx!("BP08/BC08/RB08/16S08/RLB08", "TTCAGGGAACAAACCAAGTTACGT"),
    bx!("BP09/BC09/RB09/16S09/RLB09", "AACTAGGCACAGCGAGTCTTGGTT"),
    bx!("BP10/BC10/RB10/16S10/RLB10", "AAGCGTTGAAACCTTTGTCCTCTC"),
    bx!("BP11/BC11/RB11/16S11/RLB11", "GTTTCATCTATCGGAGGGAATGGA"),
    bx!("BP12/BC12/RB12/16S12/RLB12", "CAGGTAGAAAGAAGCAGAATCGGA")
];

/// Shared cores 25–96 (BC/RB only).
pub const SHARED_25_TO_96: &[SequenceRecord] = &[
    bx!("BC25/RB25", "GTAAGTTGGGTATGCAACGCAATG"),
    bx!("BC26/RB26", "CATACAGCGACTACGCATTCTCAT"),
    bx!("BC27/RB27", "CGACGGTTAGATTCACCTCTTACA"),
    bx!("BC28/RB28", "TGAAACCTAAGAAGGCACCGTATC"),
    bx!("BC29/RB29", "CTAGACACCTTGGGTTGACAGACC"),
    bx!("BC30/RB30", "TCAGTGAGGATCTACTTCGACCCA"),
    bx!("BC31/RB31", "TGCGTACAGCAATCAGTTACATTG"),
    bx!("BC32/RB32", "CCAGTAGAAGTCCGACAACGTCAT"),
    bx!("BC33/RB33", "CAGACTTGGTACGGTTGGGTAACT"),
    bx!("BC34/RB34", "GGACGAAGAACTCAAGTCAAAGGC"),
    bx!("BC35/RB35", "CTACTTACGAAGCTGAGGGACTGC"),
    bx!("BC36/RB36", "ATGTCCCAGTTAGAGGAGGAAACA"),
    bx!("BC37/RB37", "GCTTGCGATTGATGCTTAGTATCA"),
    bx!("BC38/RB38", "ACCACAGGAGGACGATACAGAGAA"),
    bx!("BC39/RB39", "CCACAGTGTCAACTAGAGCCTCTC"),
    bx!("BC40/RB40", "TAGTTTGGATGACCAAGGATAGCC"),
    bx!("BC41/RB41", "GGAGTTCGTCCAGAGAAGTACACG"),
    bx!("BC42/RB42", "CTACGTGTAAGGCATACCTGCCAG"),
    bx!("BC43/RB43", "CTTTCGTTGTTGACTCGACGGTAG"),
    bx!("BC44/RB44", "AGTAGAAAGGGTTCCTTCCCACTC"),
    bx!("BC45/RB45", "GATCCAACAGAGATGCCTTCAGTG"),
    bx!("BC46/RB46", "GCTGTGTTCCACTTCATTCTCCTG"),
    bx!("BC47/RB47", "GTGCAACTTTCCCACAGGTAGTTC"),
    bx!("BC48/RB48", "CATCTGGAACGTGGTACACCTGTA"),
    bx!("BC49/RB49", "ACTGGTGCAGCTTTGAACATCTAG"),
    bx!("BC50/RB50", "ATGGACTTTGGTAACTTCCTGCGT"),
    bx!("BC51/RB51", "GTTGAATGAGCCTACTGGGTCCTC"),
    bx!("BC52/RB52", "TGAGAGACAAGATTGTTCGTGGAC"),
    bx!("BC53/RB53", "AGATTCAGACCGTCTCATGCAAAG"),
    bx!("BC54/RB54", "CAAGAGCTTTGACTAAGGAGCATG"),
    bx!("BC55/RB55", "TGGAAGATGAGACCCTGATCTACG"),
    bx!("BC56/RB56", "TCACTACTCAACAGGTGGCATGAA"),
    bx!("BC57/RB57", "GCTAGGTCAATCTCCTTCGGAAGT"),
    bx!("BC58/RB58", "CAGGTTACTCCTCCGTGAGTCTGA"),
    bx!("BC59/RB59", "TCAATCAAGAAGGGAAAGCAAGGT"),
    bx!("BC60/RB60", "CATGTTCAACCAAGGCTTCTATGG"),
    bx!("BC61/RB61", "AGAGGGTACTATGTGCCTCAGCAC"),
    bx!("BC62/RB62", "CACCCACACTTACTTCAGGACGTA"),
    bx!("BC63/RB63", "TTCTGAAGTTCCTGGGTCTTGAAC"),
    bx!("BC64/RB64", "GACAGACACCGTTCATCGACTTTC"),
    bx!("BC65/RB65", "TTCTCAGTCTTCCTCCAGACAAGG"),
    bx!("BC66/RB66", "CCGATCCTTGTGGCTTCTAACTTC"),
    bx!("BC67/RB67", "GTTTGTCATACTCGTGTGCTCACC"),
    bx!("BC68/RB68", "GAATCTAAGCAAACACGAAGGTGG"),
    bx!("BC69/RB69", "TACAGTCCGAGCCTCATGTGATCT"),
    bx!("BC70/RB70", "ACCGAGATCCTACGAATGGAGTGT"),
    bx!("BC71/RB71", "CCTGGGAGCATCAGGTAGTAACAG"),
    bx!("BC72/RB72", "TAGCTGACTGTCTTCCATACCGAC"),
    bx!("BC73/RB73", "AAGAAACAGGATGACAGAACCCTC"),
    bx!("BC74/RB74", "TACAAGCATCCCAACACTTCCACT"),
    bx!("BC75/RB75", "GACCATTGTGATGAACCCTGTTGT"),
    bx!("BC76/RB76", "ATGCTTGTTACATCAACCCTGGAC"),
    bx!("BC77/RB77", "CGACCTGTTTCTCAGGGATACAAC"),
    bx!("BC78/RB78", "AACAACCGAACCTTTGAATCAGAA"),
    bx!("BC79/RB79", "TCTCGGAGATAGTTCTCACTGCTG"),
    bx!("BC80/RB80", "CGGATGAACATAGGATAGCGATTC"),
    bx!("BC81/RB81", "CCTCATCTTGTGAAGTTGTTTCGG"),
    bx!("BC82/RB82", "ACGGTATGTCGAGTTCCAGGACTA"),
    bx!("BC83/RB83", "TGGCTTGATCTAGGTAAGGTCGAA"),
    bx!("BC84/RB84", "GTAGTGGACCTAGAACCTGTGCCA"),
    bx!("BC85/RB85", "AACGGAGGAGTTAGTTGGATGATC"),
    bx!("BC86/RB86", "AGGTGATCCCAACAAGCGTAAGTA"),
    bx!("BC87/RB87", "TACATGCTCCTGTTGTTAGGGAGG"),
    bx!("BC88/RB88", "TCTTCTACTACCGATCCGAAGCAG"),
    bx!("BC89/RB89", "ACAGCATCAATGTTTGGCTAGTTG"),
    bx!("BC90/RB90", "GATGTAGAGGGTACGGTTTGAGGC"),
    bx!("BC91/RB91", "GGCTCCATAGGAACTCACGCTACT"),
    bx!("BC92/RB92", "TTGTGAGTGGAAAGATACAGGACC"),
    bx!("BC93/RB93", "AGTTTCCATCACTTCAGACTTGGG"),
    bx!("BC94/RB94", "GATTGTCCTCAAACTGCCACCTAC"),
    bx!("BC95/RB95", "CCTGTCTGGAAGAAGAATGGACTT"),
    bx!("BC96/RB96", "CTGAACGGTCATAGAGTCCACCAT")
];

/// Convenience: all shared cores 1–96 in a single array (const-friendly).
pub const SHARED_BARCODE_SET: &[SequenceRecord] = &[
    bx!("BP01/BC01/RB01/16S01/RLB01", "AAGAAAGTTGTCGGTGTCTTTGTG"),
    bx!("BP02/BC02/RB02/16S02/RLB02", "TCGATTCCGTTTGTAGTCGTCTGT"),
    bx!("BP03/BC03/RB03/16S03/RLB03", "GAGTCTTGTGTCCCAGTTACCAGG"),
    bx!("BP04/BC04/RB04/16S04/RLB04", "TTCGGATTCTATCGTGTTTCCCTA"),
    bx!("BP05/BC05/RB05/16S05/RLB05", "CTTGTCCAGGGTTTGTGTAACCTT"),
    bx!("BP06/BC06/RB06/16S06/RLB06", "TTCTCGCAAAGGCAGAAAGTAGTC"),
    bx!("BP07/BC07/RB07/16S07/RLB07", "GTGTTACCGTGGGAATGAATCCTT"),
    bx!("BP08/BC08/RB08/16S08/RLB08", "TTCAGGGAACAAACCAAGTTACGT"),
    bx!("BP09/BC09/RB09/16S09/RLB09", "AACTAGGCACAGCGAGTCTTGGTT"),
    bx!("BP10/BC10/RB10/16S10/RLB10", "AAGCGTTGAAACCTTTGTCCTCTC"),
    bx!("BP11/BC11/RB11/16S11/RLB11", "GTTTCATCTATCGGAGGGAATGGA"),
    bx!("BP12/BC12/RB12/16S12/RLB12", "CAGGTAGAAAGAAGCAGAATCGGA"),
    bx!("BP13/BC13/RB13/16S13/RLB13", "AGAACGACTTCCATACTCGTGTGA"),
    bx!("BP14/BC14/RB14/16S14/RLB14", "AACGAGTCTCTTGGGACCCATAGA"),
    bx!("BP15/BC15/RB15/16S15/RLB15", "AGGTCTACCTCGCTAACACCACTG"),
    bx!("BP16/BC16/RB16/16S16/RLB16", "CGTCAACTGACAGTGGTTCGTACT"),
    bx!("BP17/BC17/RB17/16S17/RLB17", "ACCCTCCAGGAAAGTACCTCTGAT"),
    bx!("BP18/BC18/RB18/16S18/RLB18", "CCAAACCCAACAACCTAGATAGGC"),
    bx!("BP19/BC19/RB19/16S19/RLB19", "GTTCCTCGTGCAGTGTCAAGAGAT"),
    bx!("BP20/BC20/RB20/16S20/RLB20", "TTGCGTCCTGTTACGAGAACTCAT"),
    bx!("BP21/BC21/RB21/16S21/RLB21", "GAGCCTCTCATTGTCCGTTCTCTA"),
    bx!("BP22/BC22/RB22/16S22/RLB22", "ACCACTGCCATGTATCAAAGTACG"),
    bx!("BP23/BC23/RB23/16S23/RLB23", "CTTACTACCCAGTGAACCTCCTCG"),
    bx!("BP24/BC24/RB24/16S24/RLB24", "GCATAGTTCTGCATGATGGGTTAG"),
    bx!("BC25/RB25", "GTAAGTTGGGTATGCAACGCAATG"),
    bx!("BC26/RB26", "CATACAGCGACTACGCATTCTCAT"),
    bx!("BC27/RB27", "CGACGGTTAGATTCACCTCTTACA"),
    bx!("BC28/RB28", "TGAAACCTAAGAAGGCACCGTATC"),
    bx!("BC29/RB29", "CTAGACACCTTGGGTTGACAGACC"),
    bx!("BC30/RB30", "TCAGTGAGGATCTACTTCGACCCA"),
    bx!("BC31/RB31", "TGCGTACAGCAATCAGTTACATTG"),
    bx!("BC32/RB32", "CCAGTAGAAGTCCGACAACGTCAT"),
    bx!("BC33/RB33", "CAGACTTGGTACGGTTGGGTAACT"),
    bx!("BC34/RB34", "GGACGAAGAACTCAAGTCAAAGGC"),
    bx!("BC35/RB35", "CTACTTACGAAGCTGAGGGACTGC"),
    bx!("BC36/RB36", "ATGTCCCAGTTAGAGGAGGAAACA"),
    bx!("BC37/RB37", "GCTTGCGATTGATGCTTAGTATCA"),
    bx!("BC38/RB38", "ACCACAGGAGGACGATACAGAGAA"),
    bx!("BC39/RB39", "CCACAGTGTCAACTAGAGCCTCTC"),
    bx!("BC40/RB40", "TAGTTTGGATGACCAAGGATAGCC"),
    bx!("BC41/RB41", "GGAGTTCGTCCAGAGAAGTACACG"),
    bx!("BC42/RB42", "CTACGTGTAAGGCATACCTGCCAG"),
    bx!("BC43/RB43", "CTTTCGTTGTTGACTCGACGGTAG"),
    bx!("BC44/RB44", "AGTAGAAAGGGTTCCTTCCCACTC"),
    bx!("BC45/RB45", "GATCCAACAGAGATGCCTTCAGTG"),
    bx!("BC46/RB46", "GCTGTGTTCCACTTCATTCTCCTG"),
    bx!("BC47/RB47", "GTGCAACTTTCCCACAGGTAGTTC"),
    bx!("BC48/RB48", "CATCTGGAACGTGGTACACCTGTA"),
    bx!("BC49/RB49", "ACTGGTGCAGCTTTGAACATCTAG"),
    bx!("BC50/RB50", "ATGGACTTTGGTAACTTCCTGCGT"),
    bx!("BC51/RB51", "GTTGAATGAGCCTACTGGGTCCTC"),
    bx!("BC52/RB52", "TGAGAGACAAGATTGTTCGTGGAC"),
    bx!("BC53/RB53", "AGATTCAGACCGTCTCATGCAAAG"),
    bx!("BC54/RB54", "CAAGAGCTTTGACTAAGGAGCATG"),
    bx!("BC55/RB55", "TGGAAGATGAGACCCTGATCTACG"),
    bx!("BC56/RB56", "TCACTACTCAACAGGTGGCATGAA"),
    bx!("BC57/RB57", "GCTAGGTCAATCTCCTTCGGAAGT"),
    bx!("BC58/RB58", "CAGGTTACTCCTCCGTGAGTCTGA"),
    bx!("BC59/RB59", "TCAATCAAGAAGGGAAAGCAAGGT"),
    bx!("BC60/RB60", "CATGTTCAACCAAGGCTTCTATGG"),
    bx!("BC61/RB61", "AGAGGGTACTATGTGCCTCAGCAC"),
    bx!("BC62/RB62", "CACCCACACTTACTTCAGGACGTA"),
    bx!("BC63/RB63", "TTCTGAAGTTCCTGGGTCTTGAAC"),
    bx!("BC64/RB64", "GACAGACACCGTTCATCGACTTTC"),
    bx!("BC65/RB65", "TTCTCAGTCTTCCTCCAGACAAGG"),
    bx!("BC66/RB66", "CCGATCCTTGTGGCTTCTAACTTC"),
    bx!("BC67/RB67", "GTTTGTCATACTCGTGTGCTCACC"),
    bx!("BC68/RB68", "GAATCTAAGCAAACACGAAGGTGG"),
    bx!("BC69/RB69", "TACAGTCCGAGCCTCATGTGATCT"),
    bx!("BC70/RB70", "ACCGAGATCCTACGAATGGAGTGT"),
    bx!("BC71/RB71", "CCTGGGAGCATCAGGTAGTAACAG"),
    bx!("BC72/RB72", "TAGCTGACTGTCTTCCATACCGAC"),
    bx!("BC73/RB73", "AAGAAACAGGATGACAGAACCCTC"),
    bx!("BC74/RB74", "TACAAGCATCCCAACACTTCCACT"),
    bx!("BC75/RB75", "GACCATTGTGATGAACCCTGTTGT"),
    bx!("BC76/RB76", "ATGCTTGTTACATCAACCCTGGAC"),
    bx!("BC77/RB77", "CGACCTGTTTCTCAGGGATACAAC"),
    bx!("BC78/RB78", "AACAACCGAACCTTTGAATCAGAA"),
    bx!("BC79/RB79", "TCTCGGAGATAGTTCTCACTGCTG"),
    bx!("BC80/RB80", "CGGATGAACATAGGATAGCGATTC"),
    bx!("BC81/RB81", "CCTCATCTTGTGAAGTTGTTTCGG"),
    bx!("BC82/RB82", "ACGGTATGTCGAGTTCCAGGACTA"),
    bx!("BC83/RB83", "TGGCTTGATCTAGGTAAGGTCGAA"),
    bx!("BC84/RB84", "GTAGTGGACCTAGAACCTGTGCCA"),
    bx!("BC85/RB85", "AACGGAGGAGTTAGTTGGATGATC"),
    bx!("BC86/RB86", "AGGTGATCCCAACAAGCGTAAGTA"),
    bx!("BC87/RB87", "TACATGCTCCTGTTGTTAGGGAGG"),
    bx!("BC88/RB88", "TCTTCTACTACCGATCCGAAGCAG"),
    bx!("BC89/RB89", "ACAGCATCAATGTTTGGCTAGTTG"),
    bx!("BC90/RB90", "GATGTAGAGGGTACGGTTTGAGGC"),
    bx!("BC91/RB91", "GGCTCCATAGGAACTCACGCTACT"),
    bx!("BC92/RB92", "TTGTGAGTGGAAAGATACAGGACC"),
    bx!("BC93/RB93", "AGTTTCCATCACTTCAGACTTGGG"),
    bx!("BC94/RB94", "GATTGTCCTCAAACTGCCACCTAC"),
    bx!("BC95/RB95", "CCTGTCTGGAAGAAGAATGGACTT"),
    bx!("BC96/RB96", "CTGAACGGTCATAGAGTCCACCAT")
];
